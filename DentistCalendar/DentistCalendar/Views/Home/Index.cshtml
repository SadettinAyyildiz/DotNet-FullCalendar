@{
    ViewData["Title"] = "Home Page";
}

@section Styles {
    <!-- bootstrap görünümü için -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href='~/lib/fullcalendar/core/main.css' rel='stylesheet' />
    <link href='~/lib/fullcalendar/daygrid/main.css' rel='stylesheet' />
    <link href='~/lib/fullcalendar/interaction/main.js' rel='stylesheet' />
    <link href='~/lib/fullcalendar/list/main.css' rel='stylesheet' />
    <!-- bootstrap teması için -->
    <link href='~/lib/fullcalendar/bootstrap/main.css' rel='stylesheet' />
    <!-- dosya yolundan sürükle bırak ile sonradan ekledik -->
    <!-- saatlere bölünmüş haftalar gridini eklemek için -->
    <link href="~/lib/fullcalendar/timegrid/main.css" rel="stylesheet" />
}

<div id="calendar">

</div>


@section Scripts {
    <script src='/lib/fullcalendar/core/main.js'></script>
    <script src='/lib/fullcalendar/daygrid/main.js'></script>
    <script src='/lib/fullcalendar/interaction/main.js'></script>
    <script src='/lib/fullcalendar/list/main.js'></script>

    <!-- bootstrap teması için -->
    <script src='/lib/fullcalendar/bootstrap/main.js'></script>

    <!-- dosya yolundan sürükle bırak ile sonradan ekledik -->
    <!-- saatlere bölünmüş haftalar gridini eklemek için -->
    <script src="~/lib/fullcalendar/timegrid/main.js"></script>

    <!-- türkçe dil desteğinin eklenmesi -->
    <script src='/lib/fullcalendar/core/locales/tr.js'></script>
    <script>

        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {

                // kullanılacak gridleri plugin olarak ekliyoruz
                // interaction: selectable ve select kullanımı için
                plugins: ['interaction','dayGrid', 'timeGrid', 'list', 'bootstrap'],

                // tema değiştirme
                themeSystem: 'bootstrap',

                // butonlara ikon eklemek ya da ikonları değiştirmek
                bootstrapFontAwesome: {
                    dayGridMonth: 'calendar',
                    prev: 'fa-chevron-circle-left',
                    next: 'fa-chevron-circle-right',
                    listWeek: 'fa-list' // Ajanda butonuna liste ikonu eklendi
                },

                // takvimin türkçe kullanımı için
                locale: 'tr',

                // header bölümünde ne hangi tarafta görünecek
                header: {
                    left: 'prev, next, today, addEvent', //getDate', // araya virgüllerden sonra boşluk bırakırsak takvimde da bırakıyor
                    center: 'title',
                    right: 'dayGridMonth, timeGridWeek, timeGridDay, timeGridForFourDay, listWeek', // günlere bölünmüş aylar, saatlere bölünmüş haftalar, saatlere bölünmüş günler alanları
                    // Liste görünümü: listDay, listWeek, listMonth, listYear 
                },

                // footer oluşturma
                footer: {
                    left: 'prevYear',
                    //center: 'title',
                    right: 'nextYear'
                },

                // scroll un en üstü kaçtan başlasın
                //scrollTime: '09:00:00', // default 06:00:00 gelir

                // Takvimin başlangıç ve bitiş saatini ayarlamak için
                minTime: '08:00:00',
                maxTime: '21:00:00',

                // otomatik boyutlandırma - responsiv
                //handleWindowResize: true,  // default true gelir

                //// Haftalık takvimdeki saat aralıklarını kaçar dakika bölsün
                //slotDuration: '00:15:00', // default yarım saat gelir

                //// En sol sütundaki ne sıklıkta zaman aralığı rakamlarını göstersin
                //slotLabelInterval: '00:15:00', // üstteki ile aynı ayarladık, her gridde göstercek

                //// en sol sütundaki saat gösterimini formatlamak için
                slotLabelFormat: {
                    hour: '2-digit', //'numeric',
                    minute: '2-digit',
                    //omitZeroMinute: true, // sıfırlı dakikaları göstermez
                    //meridiem: 'short' //'long' // Dil ingilizce aayrlanmalı, am/pm gösterimi açma
                },

                // Ay görünümünde kaç hafta görünecek, default 6 gelir, bi sonraki ayın haftaları silik görünür
                // false yapıldığında o ayda günü olmayan haftaları göstermez
                fixedWeekCount: true, // default true gelir

                // Aylık görünümde o aya ait olmayan günleri göstermez
                showNonCurrentDates: false, // default true gelir

                // Ekran boyutu değiştiğinde takvim ne kadar zamanda tekrar render edilsin
                //windowResizeDelay: 100, // default 100 gelir
                //windowResize: function (view) {
                //    alert('Takvim tekrar boyutlandırıldı');
                //},

                // Footer ve Header dahil yüksekliği belirler
                //height: 300,

                // Sadece Calendar bölümünün yüksekliğini belirler
                contentHeight: 650,

                //Boyut ölçeklendirme
                //aspectRatio: 1.3

                // default olarak timeGridWeek mı gelsin dayGridMonth mı gelsin (günlere bölünmüş haftalar, aya göre bölünmüş günler)
                defaultView: 'dayGridMonth',//'timeGridWeek',

                // haftasonları takvimde görünsün mü görünmesin mi
                weekends: true,

                // en üstüke tüm gün slotunu kapatır, default true gelir
                allDaySlot: false,

                // Başlangıç gününü değiştirmek
                //firstDay: 0, // Pazar=0, 1, 2, ...

                // başlığı formatlamak için
                titleFormat: {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                },

                //Başlığı formatlama
                titleRangeSeparator: ' / ',

                //Başlıkları formatlama
                columnHeaderFormat: {
                    //month: 'numeric',
                    weekday: 'long',//'short',
                    //day: 'numeric'
                },

                // kendi görünümünü oluşturma
                views: {
                    timeGridForFourDay: {
                        type: 'timeGrid',
                        //dayCount gizlenmiş günler denk geliyorsa atlar sonraki günleri alır, duration gizlenmiş günler geliyorsa göstermez eksik gün gösterir
                        //dayCount: 4,
                        duration: { days: 4 },
                        buttonText: '4 Gün' // default olarak timeGrid i alır
                    }
                },

                // Eventleri sıralama
                // eventOrder: 'title' // start, duration, allDay, title, [], function

                // buton text lerini değiştirmek
                //buttonText: {
                //    today: 'Bugün Bugün',
                //    month: 'Ay ve Ay',
                //    week: 'Hafta Hafta',
                //    day: 'Gün Gün'
                //},

                // takvim yüklendiğindeki başlangıç tarihini belirler. default bugün tarihi gelir
                // defaultDate: '2023-03-04',

                // takvimin hangi tarihler arasındaki günleri göstereceğini belirler
                //validRange: {
                //    start: '2023-03-02'
                //},

                // takvimde kullanılacak zaman dilimi için
                timeZone: 'uTC', // default local gelir ve tarayıcıdan tarayıcıya farklılık gösterir

                //kendi butonumuzu oluşturma
                //customButtons: {
                //    getDate: {
                //        text: 'date',
                //        click: function () {
                //            var date = new Date();
                //            alert(date);
                //        }
                //    }
                //},

                //kendi butonumuzu oluşturma ve bu butonla event ekleme
                customButtons: {
                    addEvent: {
                        text: 'Ekle',
                        click: function () {
                            var newEvent = {
                                id: 'a',
                                title: 'New Event',
                                start: '2023-03-03T15:00:00.000Z',
                                end: '2023-03-03T15:30:00.000Z'
                            }
                            calendar.addEvent(newEvent);
                        }
                    }
                },

                //Event rengini ve border rengini değiştirme/aynı renk yapar
                //eventColor: 'red',

                //eventrengini, text rengini ve border rengini farklı yapmak istersek iki özellği kullanırız
                //eventBackgroundColor: 'red',
                //eventBorderColor: 'black',
                //eventTextColor: 'white',

                // event başlangıç ve bitiş zamanlarını formatlama
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    //second: '2-digit',
                    //omitZeroMinute: true, // sıfırlı dakikaları göstermez
                    //meridiem: 'short' //'long' // Dil ingilizce aayrlanmalı, am/pm gösterimi açma 'narrow' -> a,p
                },
               
                displayEventTime: true, // randevu/event alanında saati göstersin mi? default: true gelir
                displayEventEnd: false, // randevu bitiş saati görünsün mü? false olursa sadece başlangıç görünür. default: true gelir.

                // takvimde randevu oluşturur
                events: [
                    {
                        id: 'x',
                        title: 'Merhaba X',
                        start: '2023-03-03T08:00:00.000Z',
                        end: '2023-03-02T10:30:00.000Z'
                    },
                    {
                        id: 'y',
                        title: 'Merhaba Y',
                        start: '2023-03-03T11:00:00.000Z',
                        end: '2023-03-02T12:30:00.000Z'
                    }
                ],

                // event render edildiğinde çalışacak fonksiyon
                //eventRender: function (info) {
                //    console.log(info.event.title); // info: eventi döner.  event, el, isMirror
                //},

                // takvim üzerinden seçim yapabilmek için
                selectable: true,
                select: function (selectionInfo) { //selectionInfo: start/end gibi bilgilere ulaşabiliriz
                    //istedin kod
                    console.log(selectionInfo);
                },

                // event tıklandığında, fare üzerine geldiğinde...
                eventClick: function (info) {
                    alert(info.event.title);
                },
                //eventMouseEnter: function (onMouse) {
                //    alert(onMouse.event.start);
                //},
                //eventMouseLeave: function (mouseLeave) {
                //    alert(mouseLeave.event.id);
                //}
               
                editable: true, // eventi sürükle bırak yapma, değiştirme özelliğini açmak için. açınca alttaki 2 özellik otomat true gelir
                eventStartEditable: true, // eventi sadece uzatabiliriz, başlangıcını değiştiremeyiz. default: true gelir
                eventDurationEditable: true, // resize etme özelliğini kapatır. default true gelir
                //eventDrugMinDistance: 100,  // belli miktarda mausu sürükleyince eventi hareket ettirir
                dragRevertDuration: 1500, // yalış(takvim dışına vs.) sürükleyince ne kadar zamanda geri dönecek. default 500 gelir
                dragScroll: false, // aşağı sürükleyince scroll kaysın mı? default true gelir.
                snapDuration: '00:15:00', // kaç dakika kaç dakika kaydırabilirsin. default 30 dakika gelir

                // eventler üst üste gelsin mi. true false döner
                //eventOverlap: function (stillEvent, movingEvent) { 
                //    // burada bazı kontroller yapılabilir
                //    return stillEvent.allDay && movingEvent.allDay;  // ikisi de allday olmadığı için false döner
                //},

                // sadece belli aralıklarda güncellemeye izin ver
                //eventConstraint: {
                //    startTime: '10:00',
                //    endTime: '18:00',
                //    daysOfWeek: [1,2,3] // haftanın 1. 2. 3. gününe izin ver
                //},

                // sürüklenen event üzerinde kontrol yapacaksak, ... varsa sürüklemeye izin verme gibi
                // örn: sürüklenen eventin başlangıç tarihi şu tarihten küçükse
                //eventAllow: function (dropInfoEvent, draggedEvent) {
                //    // kontroller yapılır
                //    return false;
                //},

                // eventi hareket ettirdiğimizde çalışacak fonksiyonlar
                eventDragStart: function (info) { // eventi sürüklemeye başladığım anda çalışır
                    console.log('başladı');
                },
                eventDragStop: function (info) { // eventi sürüklemeyi bıraktığım anda çalışır
                    console.log('bitti');
                },
                eventDrop: function (eventDropInfo) { //üstteki iki methoddan sonra çalışır, değişiklik yoksa çalışmaz
                    // eventDragStart da ilk tarihe ulaşılırken bunda yeni tarihe de ulaşılabilir
                    console.log('dropped'); // event (üsttekilerde de ulaşılıyo) ve oldEvent e ulaşabilirim. revert() fonksiyonu ile aksilik durumunda geri dönülebilir
                },

                // event yeniden boyutlandırıldığında çalışacak fonksiyonlar
                eventResizeStart: function (info) {
                    console.log('eventResizeStart'); // eventi büyütmeye başladığım anda çalışır
                },
                eventResizeStop: function (info) {
                    console.log('eventResizeStop'); // eventi büyütmeyi bıraktığım anda çalışır
                },
                eventResize: function (eventResizeInfo) { //üstteki iki methoddan sonra çalışır, değişiklik yoksa çalışmaz
                    console.log('eventResize'); // event, oldEvent e ulaşılabilir. revert() fonksiyonu ile aksilik durumunda geri dönülebilir
                    //eventResizeInfo.revort(); // revert() fonksiyonu ile aksilik durumunda geri dönülebilir
                },

            });
            calendar.render();

            // oluşturulan eventleri yakalamak için
            var events = calendar.getEvents();
            console.log(events); // event.start, event.title gibi özelliklerine ulaşabiliyoruz

            // oluşturulan bir eventi id ile yakalamak için
            var id = 'x';
            var event = calendar.getEventById(id);
            console.log(event); // event.start, event.title gibi özelliklerine ulaşabiliyoruz

            // tekrar render edilmesini istersek
            //calendar.renderEvents();

        });

    </script>
}